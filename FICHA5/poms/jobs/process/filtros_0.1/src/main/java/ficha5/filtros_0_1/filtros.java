// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ficha5.filtros_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: filtros Purpose: filtra<br>
 * Description: vai buscar males do US de um estado especifico <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class filtros implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "filtros";
	private final String projectName = "FICHA5";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					filtros.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(filtros.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSortRow_3_SortOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tSortRow_3_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_3_SortIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true&useSSL=false";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "ficha5" + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "root";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[rhkxhELnf4A8pwMBUhJTDw==]");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "ficha5");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.Timestamp = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Timestamp, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Timestamp=" + Timestamp);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.Timestamp = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Timestamp, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Timestamp=" + Timestamp);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.Timestamp = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Timestamp, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Timestamp=" + Timestamp);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.Timestamp = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Timestamp, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Timestamp=" + Timestamp);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.Timestamp = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Timestamp, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Timestamp=" + Timestamp);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.Timestamp = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Timestamp, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Timestamp=" + Timestamp);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Timestamp = readString(dis);

					this.Age = readInteger(dis);

					this.Gender = readString(dis);

					this.Country = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Timestamp, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Timestamp=" + Timestamp);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Gender=" + Gender);
			sb.append(",Country=" + Country);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Timestamp = readString(dis);

					this.Age = readInteger(dis);

					this.Gender = readString(dis);

					this.Country = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Timestamp, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Timestamp=" + Timestamp);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Gender=" + Gender);
			sb.append(",Country=" + Country);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Timestamp = readString(dis);

					this.Age = readInteger(dis);

					this.Gender = readString(dis);

					this.Country = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Timestamp, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Timestamp=" + Timestamp);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Gender=" + Gender);
			sb.append(",Country=" + Country);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FICHA5_filtros = new byte[0];
		static byte[] commonByteArray_FICHA5_filtros = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Timestamp;

		public String getTimestamp() {
			return this.Timestamp;
		}

		public Integer Age;

		public Integer getAge() {
			return this.Age;
		}

		public String Gender;

		public String getGender() {
			return this.Gender;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String state;

		public String getState() {
			return this.state;
		}

		public String self_employed;

		public String getSelf_employed() {
			return this.self_employed;
		}

		public String family_history;

		public String getFamily_history() {
			return this.family_history;
		}

		public String treatment;

		public String getTreatment() {
			return this.treatment;
		}

		public String work_interfere;

		public String getWork_interfere() {
			return this.work_interfere;
		}

		public String no_employees;

		public String getNo_employees() {
			return this.no_employees;
		}

		public String remote_work;

		public String getRemote_work() {
			return this.remote_work;
		}

		public String tech_company;

		public String getTech_company() {
			return this.tech_company;
		}

		public String benefits;

		public String getBenefits() {
			return this.benefits;
		}

		public String care_options;

		public String getCare_options() {
			return this.care_options;
		}

		public String wellness_program;

		public String getWellness_program() {
			return this.wellness_program;
		}

		public String seek_help;

		public String getSeek_help() {
			return this.seek_help;
		}

		public String anonymity;

		public String getAnonymity() {
			return this.anonymity;
		}

		public String leave;

		public String getLeave() {
			return this.leave;
		}

		public String mental_health_consequence;

		public String getMental_health_consequence() {
			return this.mental_health_consequence;
		}

		public String phys_health_consequence;

		public String getPhys_health_consequence() {
			return this.phys_health_consequence;
		}

		public String coworkers;

		public String getCoworkers() {
			return this.coworkers;
		}

		public String supervisor;

		public String getSupervisor() {
			return this.supervisor;
		}

		public String mental_health_interview;

		public String getMental_health_interview() {
			return this.mental_health_interview;
		}

		public String phys_health_interview;

		public String getPhys_health_interview() {
			return this.phys_health_interview;
		}

		public String mental_vs_physical;

		public String getMental_vs_physical() {
			return this.mental_vs_physical;
		}

		public String obs_consequence;

		public String getObs_consequence() {
			return this.obs_consequence;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FICHA5_filtros.length) {
					if (length < 1024 && commonByteArray_FICHA5_filtros.length == 0) {
						commonByteArray_FICHA5_filtros = new byte[1024];
					} else {
						commonByteArray_FICHA5_filtros = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FICHA5_filtros, 0, length);
				strReturn = new String(commonByteArray_FICHA5_filtros, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FICHA5_filtros) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Timestamp = readString(dis);

					this.Age = readInteger(dis);

					this.Gender = readString(dis);

					this.Country = readString(dis);

					this.state = readString(dis);

					this.self_employed = readString(dis);

					this.family_history = readString(dis);

					this.treatment = readString(dis);

					this.work_interfere = readString(dis);

					this.no_employees = readString(dis);

					this.remote_work = readString(dis);

					this.tech_company = readString(dis);

					this.benefits = readString(dis);

					this.care_options = readString(dis);

					this.wellness_program = readString(dis);

					this.seek_help = readString(dis);

					this.anonymity = readString(dis);

					this.leave = readString(dis);

					this.mental_health_consequence = readString(dis);

					this.phys_health_consequence = readString(dis);

					this.coworkers = readString(dis);

					this.supervisor = readString(dis);

					this.mental_health_interview = readString(dis);

					this.phys_health_interview = readString(dis);

					this.mental_vs_physical = readString(dis);

					this.obs_consequence = readString(dis);

					this.comments = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Timestamp, dos);

				// Integer

				writeInteger(this.Age, dos);

				// String

				writeString(this.Gender, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.state, dos);

				// String

				writeString(this.self_employed, dos);

				// String

				writeString(this.family_history, dos);

				// String

				writeString(this.treatment, dos);

				// String

				writeString(this.work_interfere, dos);

				// String

				writeString(this.no_employees, dos);

				// String

				writeString(this.remote_work, dos);

				// String

				writeString(this.tech_company, dos);

				// String

				writeString(this.benefits, dos);

				// String

				writeString(this.care_options, dos);

				// String

				writeString(this.wellness_program, dos);

				// String

				writeString(this.seek_help, dos);

				// String

				writeString(this.anonymity, dos);

				// String

				writeString(this.leave, dos);

				// String

				writeString(this.mental_health_consequence, dos);

				// String

				writeString(this.phys_health_consequence, dos);

				// String

				writeString(this.coworkers, dos);

				// String

				writeString(this.supervisor, dos);

				// String

				writeString(this.mental_health_interview, dos);

				// String

				writeString(this.phys_health_interview, dos);

				// String

				writeString(this.mental_vs_physical, dos);

				// String

				writeString(this.obs_consequence, dos);

				// String

				writeString(this.comments, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Timestamp=" + Timestamp);
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Gender=" + Gender);
			sb.append(",Country=" + Country);
			sb.append(",state=" + state);
			sb.append(",self_employed=" + self_employed);
			sb.append(",family_history=" + family_history);
			sb.append(",treatment=" + treatment);
			sb.append(",work_interfere=" + work_interfere);
			sb.append(",no_employees=" + no_employees);
			sb.append(",remote_work=" + remote_work);
			sb.append(",tech_company=" + tech_company);
			sb.append(",benefits=" + benefits);
			sb.append(",care_options=" + care_options);
			sb.append(",wellness_program=" + wellness_program);
			sb.append(",seek_help=" + seek_help);
			sb.append(",anonymity=" + anonymity);
			sb.append(",leave=" + leave);
			sb.append(",mental_health_consequence=" + mental_health_consequence);
			sb.append(",phys_health_consequence=" + phys_health_consequence);
			sb.append(",coworkers=" + coworkers);
			sb.append(",supervisor=" + supervisor);
			sb.append(",mental_health_interview=" + mental_health_interview);
			sb.append(",phys_health_interview=" + phys_health_interview);
			sb.append(",mental_vs_physical=" + mental_vs_physical);
			sb.append(",obs_consequence=" + obs_consequence);
			sb.append(",comments=" + comments);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				row5Struct row5 = new row5Struct();
				row4Struct row4 = new row4Struct();
				row6Struct row6 = new row6Struct();
				row8Struct row8 = new row8Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class Comparablerow5Struct extends row5Struct implements Comparable<Comparablerow5Struct> {

					public int compareTo(Comparablerow5Struct other) {

						if (this.state == null && other.state != null) {
							return -1;

						} else if (this.state != null && other.state == null) {
							return 1;

						} else if (this.state != null && other.state != null) {
							if (!this.state.equals(other.state)) {
								return this.state.compareTo(other.state);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow5Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow5Struct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tSortRow_3_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortOut", false);
				start_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tSortRow_3_SortOut = 0;

				class Comparablerow8Struct extends row8Struct implements Comparable<Comparablerow8Struct> {

					public int compareTo(Comparablerow8Struct other) {

						if (this.state == null && other.state != null) {
							return -1;

						} else if (this.state != null && other.state == null) {
							return 1;

						} else if (this.state != null && other.state != null) {
							if (!this.state.equals(other.state)) {
								return this.state.compareTo(other.state);
							}
						}
						return 0;
					}
				}

				java.util.List<Comparablerow8Struct> list_tSortRow_3_SortOut = new java.util.ArrayList<Comparablerow8Struct>();

				/**
				 * [tSortRow_3_SortOut begin ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFilterRow_4 = 0;

				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select  *  from mental_health";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.ID = 0;
						} else {

							row1.ID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.Timestamp = null;
						} else {

							row1.Timestamp = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Age = null;
						} else {

							row1.Age = rs_tDBInput_1.getInt(3);
							if (rs_tDBInput_1.wasNull()) {
								row1.Age = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Gender = null;
						} else {

							row1.Gender = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.Country = null;
						} else {

							row1.Country = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.state = null;
						} else {

							row1.state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.self_employed = null;
						} else {

							row1.self_employed = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.family_history = null;
						} else {

							row1.family_history = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.treatment = null;
						} else {

							row1.treatment = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.work_interfere = null;
						} else {

							row1.work_interfere = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.no_employees = null;
						} else {

							row1.no_employees = routines.system.JDBCUtil.getString(rs_tDBInput_1, 11, false);
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.remote_work = null;
						} else {

							row1.remote_work = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.tech_company = null;
						} else {

							row1.tech_company = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.benefits = null;
						} else {

							row1.benefits = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.care_options = null;
						} else {

							row1.care_options = routines.system.JDBCUtil.getString(rs_tDBInput_1, 15, false);
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.wellness_program = null;
						} else {

							row1.wellness_program = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.seek_help = null;
						} else {

							row1.seek_help = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.anonymity = null;
						} else {

							row1.anonymity = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.leave = null;
						} else {

							row1.leave = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.mental_health_consequence = null;
						} else {

							row1.mental_health_consequence = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.phys_health_consequence = null;
						} else {

							row1.phys_health_consequence = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.coworkers = null;
						} else {

							row1.coworkers = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.supervisor = null;
						} else {

							row1.supervisor = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.mental_health_interview = null;
						} else {

							row1.mental_health_interview = routines.system.JDBCUtil.getString(rs_tDBInput_1, 24, false);
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.phys_health_interview = null;
						} else {

							row1.phys_health_interview = routines.system.JDBCUtil.getString(rs_tDBInput_1, 25, false);
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.mental_vs_physical = null;
						} else {

							row1.mental_vs_physical = routines.system.JDBCUtil.getString(rs_tDBInput_1, 26, false);
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.obs_consequence = null;
						} else {

							row1.obs_consequence = routines.system.JDBCUtil.getString(rs_tDBInput_1, 27, false);
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.comments = null;
						} else {

							row1.comments = routines.system.JDBCUtil.getString(rs_tDBInput_1, 28, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_4 main ] start
						 */

						currentComponent = "tFilterRow_4";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
						}

						row2 = null;
						Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
						ope_tFilterRow_4.matches(
								(row1.Country == null ? false : row1.Country.compareTo("United States") == 0),
								"Country.compareTo(\"United States\") == 0 failed");

						if (ope_tFilterRow_4.getMatchFlag()) {
							if (row2 == null) {
								row2 = new row2Struct();
							}
							row2.ID = row1.ID;
							row2.Timestamp = row1.Timestamp;
							row2.Age = row1.Age;
							row2.Gender = row1.Gender;
							row2.Country = row1.Country;
							row2.state = row1.state;
							row2.self_employed = row1.self_employed;
							row2.family_history = row1.family_history;
							row2.treatment = row1.treatment;
							row2.work_interfere = row1.work_interfere;
							row2.no_employees = row1.no_employees;
							row2.remote_work = row1.remote_work;
							row2.tech_company = row1.tech_company;
							row2.benefits = row1.benefits;
							row2.care_options = row1.care_options;
							row2.wellness_program = row1.wellness_program;
							row2.seek_help = row1.seek_help;
							row2.anonymity = row1.anonymity;
							row2.leave = row1.leave;
							row2.mental_health_consequence = row1.mental_health_consequence;
							row2.phys_health_consequence = row1.phys_health_consequence;
							row2.coworkers = row1.coworkers;
							row2.supervisor = row1.supervisor;
							row2.mental_health_interview = row1.mental_health_interview;
							row2.phys_health_interview = row1.phys_health_interview;
							row2.mental_vs_physical = row1.mental_vs_physical;
							row2.obs_consequence = row1.obs_consequence;
							row2.comments = row1.comments;
							nb_line_ok_tFilterRow_4++;
						} else {
							nb_line_reject_tFilterRow_4++;
						}

						nb_line_tFilterRow_4++;

						tos_count_tFilterRow_4++;

						/**
						 * [tFilterRow_4 main ] stop
						 */

						/**
						 * [tFilterRow_4 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_4";

						/**
						 * [tFilterRow_4 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
							}

							row6 = null;
							row3 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
							ope_tFilterRow_1.matches((row2.Gender == null ? false : row2.Gender.compareTo("Male") == 0),
									"Gender.compareTo(\"Male\") == 0 failed");
							ope_tFilterRow_1.matches((row2.Gender == null ? false : row2.Gender.compareTo("M") == 0),
									"Gender.compareTo(\"M\") == 0 failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row3 == null) {
									row3 = new row3Struct();
								}
								row3.ID = row2.ID;
								row3.Timestamp = row2.Timestamp;
								row3.Age = row2.Age;
								row3.Gender = row2.Gender;
								row3.Country = row2.Country;
								row3.state = row2.state;
								row3.self_employed = row2.self_employed;
								row3.family_history = row2.family_history;
								row3.treatment = row2.treatment;
								row3.work_interfere = row2.work_interfere;
								row3.no_employees = row2.no_employees;
								row3.remote_work = row2.remote_work;
								row3.tech_company = row2.tech_company;
								row3.benefits = row2.benefits;
								row3.care_options = row2.care_options;
								row3.wellness_program = row2.wellness_program;
								row3.seek_help = row2.seek_help;
								row3.anonymity = row2.anonymity;
								row3.leave = row2.leave;
								row3.mental_health_consequence = row2.mental_health_consequence;
								row3.phys_health_consequence = row2.phys_health_consequence;
								row3.coworkers = row2.coworkers;
								row3.supervisor = row2.supervisor;
								row3.mental_health_interview = row2.mental_health_interview;
								row3.phys_health_interview = row2.phys_health_interview;
								row3.mental_vs_physical = row2.mental_vs_physical;
								row3.obs_consequence = row2.obs_consequence;
								row3.comments = row2.comments;
								nb_line_ok_tFilterRow_1++;
							} else {
								if (row6 == null) {
									row6 = new row6Struct();
								}
								row6.ID = row2.ID;
								row6.Timestamp = row2.Timestamp;
								row6.Age = row2.Age;
								row6.Gender = row2.Gender;
								row6.Country = row2.Country;
								row6.state = row2.state;
								row6.self_employed = row2.self_employed;
								row6.family_history = row2.family_history;
								row6.treatment = row2.treatment;
								row6.work_interfere = row2.work_interfere;
								row6.no_employees = row2.no_employees;
								row6.remote_work = row2.remote_work;
								row6.tech_company = row2.tech_company;
								row6.benefits = row2.benefits;
								row6.care_options = row2.care_options;
								row6.wellness_program = row2.wellness_program;
								row6.seek_help = row2.seek_help;
								row6.anonymity = row2.anonymity;
								row6.leave = row2.leave;
								row6.mental_health_consequence = row2.mental_health_consequence;
								row6.phys_health_consequence = row2.phys_health_consequence;
								row6.coworkers = row2.coworkers;
								row6.supervisor = row2.supervisor;
								row6.mental_health_interview = row2.mental_health_interview;
								row6.phys_health_interview = row2.phys_health_interview;
								row6.mental_vs_physical = row2.mental_vs_physical;
								row6.obs_consequence = row2.obs_consequence;
								row6.comments = row2.comments;
								row6.errorMessage = ope_tFilterRow_1.getErrorMsg();
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tFilterColumns_1 main ] start
								 */

								currentComponent = "tFilterColumns_1";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3" + iterateId, 1, 1);
								}

								row5.Timestamp = row3.Timestamp;

								row5.state = row3.state;

								row5.self_employed = row3.self_employed;

								row5.family_history = row3.family_history;

								row5.treatment = row3.treatment;

								row5.work_interfere = row3.work_interfere;

								row5.no_employees = row3.no_employees;

								row5.remote_work = row3.remote_work;

								row5.tech_company = row3.tech_company;

								row5.benefits = row3.benefits;

								row5.care_options = row3.care_options;

								row5.wellness_program = row3.wellness_program;

								row5.seek_help = row3.seek_help;

								row5.anonymity = row3.anonymity;

								row5.leave = row3.leave;

								row5.mental_health_consequence = row3.mental_health_consequence;

								row5.phys_health_consequence = row3.phys_health_consequence;

								row5.coworkers = row3.coworkers;

								row5.supervisor = row3.supervisor;

								row5.mental_health_interview = row3.mental_health_interview;

								row5.phys_health_interview = row3.phys_health_interview;

								row5.mental_vs_physical = row3.mental_vs_physical;

								row5.obs_consequence = row3.obs_consequence;

								row5.comments = row3.comments;

								nb_line_tFilterColumns_1++;

								tos_count_tFilterColumns_1++;

								/**
								 * [tFilterColumns_1 main ] stop
								 */

								/**
								 * [tFilterColumns_1 process_data_begin ] start
								 */

								currentComponent = "tFilterColumns_1";

								/**
								 * [tFilterColumns_1 process_data_begin ] stop
								 */

								/**
								 * [tSortRow_1_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								// row5
								// row5

								if (execStat) {
									runStat.updateStatOnConnection("row5" + iterateId, 1, 1);
								}

								Comparablerow5Struct arrayRowtSortRow_1_SortOut = new Comparablerow5Struct();

								arrayRowtSortRow_1_SortOut.Timestamp = row5.Timestamp;
								arrayRowtSortRow_1_SortOut.state = row5.state;
								arrayRowtSortRow_1_SortOut.self_employed = row5.self_employed;
								arrayRowtSortRow_1_SortOut.family_history = row5.family_history;
								arrayRowtSortRow_1_SortOut.treatment = row5.treatment;
								arrayRowtSortRow_1_SortOut.work_interfere = row5.work_interfere;
								arrayRowtSortRow_1_SortOut.no_employees = row5.no_employees;
								arrayRowtSortRow_1_SortOut.remote_work = row5.remote_work;
								arrayRowtSortRow_1_SortOut.tech_company = row5.tech_company;
								arrayRowtSortRow_1_SortOut.benefits = row5.benefits;
								arrayRowtSortRow_1_SortOut.care_options = row5.care_options;
								arrayRowtSortRow_1_SortOut.wellness_program = row5.wellness_program;
								arrayRowtSortRow_1_SortOut.seek_help = row5.seek_help;
								arrayRowtSortRow_1_SortOut.anonymity = row5.anonymity;
								arrayRowtSortRow_1_SortOut.leave = row5.leave;
								arrayRowtSortRow_1_SortOut.mental_health_consequence = row5.mental_health_consequence;
								arrayRowtSortRow_1_SortOut.phys_health_consequence = row5.phys_health_consequence;
								arrayRowtSortRow_1_SortOut.coworkers = row5.coworkers;
								arrayRowtSortRow_1_SortOut.supervisor = row5.supervisor;
								arrayRowtSortRow_1_SortOut.mental_health_interview = row5.mental_health_interview;
								arrayRowtSortRow_1_SortOut.phys_health_interview = row5.phys_health_interview;
								arrayRowtSortRow_1_SortOut.mental_vs_physical = row5.mental_vs_physical;
								arrayRowtSortRow_1_SortOut.obs_consequence = row5.obs_consequence;
								arrayRowtSortRow_1_SortOut.comments = row5.comments;
								list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

								tos_count_tSortRow_1_SortOut++;

								/**
								 * [tSortRow_1_SortOut main ] stop
								 */

								/**
								 * [tSortRow_1_SortOut process_data_begin ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								/**
								 * [tSortRow_1_SortOut process_data_begin ] stop
								 */

								/**
								 * [tSortRow_1_SortOut process_data_end ] start
								 */

								currentVirtualComponent = "tSortRow_1";

								currentComponent = "tSortRow_1_SortOut";

								/**
								 * [tSortRow_1_SortOut process_data_end ] stop
								 */

								/**
								 * [tFilterColumns_1 process_data_end ] start
								 */

								currentComponent = "tFilterColumns_1";

								/**
								 * [tFilterColumns_1 process_data_end ] stop
								 */

							} // End of branch "row3"

// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tFilterColumns_2 main ] start
								 */

								currentComponent = "tFilterColumns_2";

								// row6
								// row6

								if (execStat) {
									runStat.updateStatOnConnection("row6" + iterateId, 1, 1);
								}

								row8.Timestamp = row6.Timestamp;

								row8.state = row6.state;

								row8.self_employed = row6.self_employed;

								row8.family_history = row6.family_history;

								row8.treatment = row6.treatment;

								row8.work_interfere = row6.work_interfere;

								row8.no_employees = row6.no_employees;

								row8.remote_work = row6.remote_work;

								row8.tech_company = row6.tech_company;

								row8.benefits = row6.benefits;

								row8.care_options = row6.care_options;

								row8.wellness_program = row6.wellness_program;

								row8.seek_help = row6.seek_help;

								row8.anonymity = row6.anonymity;

								row8.leave = row6.leave;

								row8.mental_health_consequence = row6.mental_health_consequence;

								row8.phys_health_consequence = row6.phys_health_consequence;

								row8.coworkers = row6.coworkers;

								row8.supervisor = row6.supervisor;

								row8.mental_health_interview = row6.mental_health_interview;

								row8.phys_health_interview = row6.phys_health_interview;

								row8.mental_vs_physical = row6.mental_vs_physical;

								row8.obs_consequence = row6.obs_consequence;

								row8.comments = row6.comments;

								nb_line_tFilterColumns_2++;

								tos_count_tFilterColumns_2++;

								/**
								 * [tFilterColumns_2 main ] stop
								 */

								/**
								 * [tFilterColumns_2 process_data_begin ] start
								 */

								currentComponent = "tFilterColumns_2";

								/**
								 * [tFilterColumns_2 process_data_begin ] stop
								 */

								/**
								 * [tSortRow_3_SortOut main ] start
								 */

								currentVirtualComponent = "tSortRow_3";

								currentComponent = "tSortRow_3_SortOut";

								// row8
								// row8

								if (execStat) {
									runStat.updateStatOnConnection("row8" + iterateId, 1, 1);
								}

								Comparablerow8Struct arrayRowtSortRow_3_SortOut = new Comparablerow8Struct();

								arrayRowtSortRow_3_SortOut.Timestamp = row8.Timestamp;
								arrayRowtSortRow_3_SortOut.state = row8.state;
								arrayRowtSortRow_3_SortOut.self_employed = row8.self_employed;
								arrayRowtSortRow_3_SortOut.family_history = row8.family_history;
								arrayRowtSortRow_3_SortOut.treatment = row8.treatment;
								arrayRowtSortRow_3_SortOut.work_interfere = row8.work_interfere;
								arrayRowtSortRow_3_SortOut.no_employees = row8.no_employees;
								arrayRowtSortRow_3_SortOut.remote_work = row8.remote_work;
								arrayRowtSortRow_3_SortOut.tech_company = row8.tech_company;
								arrayRowtSortRow_3_SortOut.benefits = row8.benefits;
								arrayRowtSortRow_3_SortOut.care_options = row8.care_options;
								arrayRowtSortRow_3_SortOut.wellness_program = row8.wellness_program;
								arrayRowtSortRow_3_SortOut.seek_help = row8.seek_help;
								arrayRowtSortRow_3_SortOut.anonymity = row8.anonymity;
								arrayRowtSortRow_3_SortOut.leave = row8.leave;
								arrayRowtSortRow_3_SortOut.mental_health_consequence = row8.mental_health_consequence;
								arrayRowtSortRow_3_SortOut.phys_health_consequence = row8.phys_health_consequence;
								arrayRowtSortRow_3_SortOut.coworkers = row8.coworkers;
								arrayRowtSortRow_3_SortOut.supervisor = row8.supervisor;
								arrayRowtSortRow_3_SortOut.mental_health_interview = row8.mental_health_interview;
								arrayRowtSortRow_3_SortOut.phys_health_interview = row8.phys_health_interview;
								arrayRowtSortRow_3_SortOut.mental_vs_physical = row8.mental_vs_physical;
								arrayRowtSortRow_3_SortOut.obs_consequence = row8.obs_consequence;
								arrayRowtSortRow_3_SortOut.comments = row8.comments;
								list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

								tos_count_tSortRow_3_SortOut++;

								/**
								 * [tSortRow_3_SortOut main ] stop
								 */

								/**
								 * [tSortRow_3_SortOut process_data_begin ] start
								 */

								currentVirtualComponent = "tSortRow_3";

								currentComponent = "tSortRow_3_SortOut";

								/**
								 * [tSortRow_3_SortOut process_data_begin ] stop
								 */

								/**
								 * [tSortRow_3_SortOut process_data_end ] start
								 */

								currentVirtualComponent = "tSortRow_3";

								currentComponent = "tSortRow_3_SortOut";

								/**
								 * [tSortRow_3_SortOut process_data_end ] stop
								 */

								/**
								 * [tFilterColumns_2 process_data_end ] start
								 */

								currentComponent = "tFilterColumns_2";

								/**
								 * [tFilterColumns_2 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFilterRow_4 process_data_end ] start
						 */

						currentComponent = "tFilterRow_4";

						/**
						 * [tFilterRow_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE", nb_line_tFilterColumns_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				row5Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow5Struct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				int nb_line_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = "C:/Users/Nuno/Desktop/TOS_BD-20190620_1446-V7.2.1/workspace/outmachosUSA.xls";
				java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
				boolean isFileGenerated_tFileOutputExcel_1 = true;
//create directory only if not exists		  
				java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1.getParentFile();
				if (parentFile_tFileOutputExcel_1 != null && !parentFile_tFileOutputExcel_1.exists()) {

					parentFile_tFileOutputExcel_1.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_1)),
						true, workbookSettings_tFileOutputExcel_1);

				writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_1 == null) {
					writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.createSheet("Sheet1",
							writeableWorkbook_tFileOutputExcel_1.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_1 = new int[24];
				for (int i_tFileOutputExcel_1 = 0; i_tFileOutputExcel_1 < 24; i_tFileOutputExcel_1++) {
					int fitCellViewSize_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1
							.getColumnView(i_tFileOutputExcel_1).getSize();
					fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] = fitCellViewSize_tFileOutputExcel_1 / 256;
					if (fitCellViewSize_tFileOutputExcel_1 % 256 != 0) {
						fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1] += 1;
					}
				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				row5Struct[] array_tSortRow_1_SortIn = (row5Struct[]) globalMap.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				row5Struct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row4.Timestamp = current_tSortRow_1_SortIn.Timestamp;
					row4.state = current_tSortRow_1_SortIn.state;
					row4.self_employed = current_tSortRow_1_SortIn.self_employed;
					row4.family_history = current_tSortRow_1_SortIn.family_history;
					row4.treatment = current_tSortRow_1_SortIn.treatment;
					row4.work_interfere = current_tSortRow_1_SortIn.work_interfere;
					row4.no_employees = current_tSortRow_1_SortIn.no_employees;
					row4.remote_work = current_tSortRow_1_SortIn.remote_work;
					row4.tech_company = current_tSortRow_1_SortIn.tech_company;
					row4.benefits = current_tSortRow_1_SortIn.benefits;
					row4.care_options = current_tSortRow_1_SortIn.care_options;
					row4.wellness_program = current_tSortRow_1_SortIn.wellness_program;
					row4.seek_help = current_tSortRow_1_SortIn.seek_help;
					row4.anonymity = current_tSortRow_1_SortIn.anonymity;
					row4.leave = current_tSortRow_1_SortIn.leave;
					row4.mental_health_consequence = current_tSortRow_1_SortIn.mental_health_consequence;
					row4.phys_health_consequence = current_tSortRow_1_SortIn.phys_health_consequence;
					row4.coworkers = current_tSortRow_1_SortIn.coworkers;
					row4.supervisor = current_tSortRow_1_SortIn.supervisor;
					row4.mental_health_interview = current_tSortRow_1_SortIn.mental_health_interview;
					row4.phys_health_interview = current_tSortRow_1_SortIn.phys_health_interview;
					row4.mental_vs_physical = current_tSortRow_1_SortIn.mental_vs_physical;
					row4.obs_consequence = current_tSortRow_1_SortIn.obs_consequence;
					row4.comments = current_tSortRow_1_SortIn.comments;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 main ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					// row4
					// row4

					if (execStat) {
						runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
					}

					if (row4.Timestamp != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 0;

						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.Timestamp);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_0_tFileOutputExcel_1);
						int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[0] = fitWidth_tFileOutputExcel_1[0] > currentWith_0_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[0]
								: currentWith_0_tFileOutputExcel_1 + 2;
					}

					if (row4.state != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 1;

						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.state);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_1_tFileOutputExcel_1);
						int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[1] = fitWidth_tFileOutputExcel_1[1] > currentWith_1_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[1]
								: currentWith_1_tFileOutputExcel_1 + 2;
					}

					if (row4.self_employed != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 2;

						jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.self_employed);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_2_tFileOutputExcel_1);
						int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[2] = fitWidth_tFileOutputExcel_1[2] > currentWith_2_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[2]
								: currentWith_2_tFileOutputExcel_1 + 2;
					}

					if (row4.family_history != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 3;

						jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.family_history);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_3_tFileOutputExcel_1);
						int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[3] = fitWidth_tFileOutputExcel_1[3] > currentWith_3_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[3]
								: currentWith_3_tFileOutputExcel_1 + 2;
					}

					if (row4.treatment != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 4;

						jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.treatment);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_4_tFileOutputExcel_1);
						int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[4] = fitWidth_tFileOutputExcel_1[4] > currentWith_4_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[4]
								: currentWith_4_tFileOutputExcel_1 + 2;
					}

					if (row4.work_interfere != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 5;

						jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.work_interfere);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_5_tFileOutputExcel_1);
						int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[5] = fitWidth_tFileOutputExcel_1[5] > currentWith_5_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[5]
								: currentWith_5_tFileOutputExcel_1 + 2;
					}

					if (row4.no_employees != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 6;

						jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.no_employees);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_6_tFileOutputExcel_1);
						int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[6] = fitWidth_tFileOutputExcel_1[6] > currentWith_6_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[6]
								: currentWith_6_tFileOutputExcel_1 + 2;
					}

					if (row4.remote_work != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 7;

						jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.remote_work);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_7_tFileOutputExcel_1);
						int currentWith_7_tFileOutputExcel_1 = cell_7_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[7] = fitWidth_tFileOutputExcel_1[7] > currentWith_7_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[7]
								: currentWith_7_tFileOutputExcel_1 + 2;
					}

					if (row4.tech_company != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 8;

						jxl.write.WritableCell cell_8_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.tech_company);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_8_tFileOutputExcel_1);
						int currentWith_8_tFileOutputExcel_1 = cell_8_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[8] = fitWidth_tFileOutputExcel_1[8] > currentWith_8_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[8]
								: currentWith_8_tFileOutputExcel_1 + 2;
					}

					if (row4.benefits != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 9;

						jxl.write.WritableCell cell_9_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.benefits);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_9_tFileOutputExcel_1);
						int currentWith_9_tFileOutputExcel_1 = cell_9_tFileOutputExcel_1.getContents().trim().length();
						fitWidth_tFileOutputExcel_1[9] = fitWidth_tFileOutputExcel_1[9] > currentWith_9_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[9]
								: currentWith_9_tFileOutputExcel_1 + 2;
					}

					if (row4.care_options != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 10;

						jxl.write.WritableCell cell_10_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.care_options);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_10_tFileOutputExcel_1);
						int currentWith_10_tFileOutputExcel_1 = cell_10_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[10] = fitWidth_tFileOutputExcel_1[10] > currentWith_10_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[10]
								: currentWith_10_tFileOutputExcel_1 + 2;
					}

					if (row4.wellness_program != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 11;

						jxl.write.WritableCell cell_11_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.wellness_program);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_11_tFileOutputExcel_1);
						int currentWith_11_tFileOutputExcel_1 = cell_11_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[11] = fitWidth_tFileOutputExcel_1[11] > currentWith_11_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[11]
								: currentWith_11_tFileOutputExcel_1 + 2;
					}

					if (row4.seek_help != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 12;

						jxl.write.WritableCell cell_12_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.seek_help);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_12_tFileOutputExcel_1);
						int currentWith_12_tFileOutputExcel_1 = cell_12_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[12] = fitWidth_tFileOutputExcel_1[12] > currentWith_12_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[12]
								: currentWith_12_tFileOutputExcel_1 + 2;
					}

					if (row4.anonymity != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 13;

						jxl.write.WritableCell cell_13_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.anonymity);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_13_tFileOutputExcel_1);
						int currentWith_13_tFileOutputExcel_1 = cell_13_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[13] = fitWidth_tFileOutputExcel_1[13] > currentWith_13_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[13]
								: currentWith_13_tFileOutputExcel_1 + 2;
					}

					if (row4.leave != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 14;

						jxl.write.WritableCell cell_14_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.leave);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_14_tFileOutputExcel_1);
						int currentWith_14_tFileOutputExcel_1 = cell_14_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[14] = fitWidth_tFileOutputExcel_1[14] > currentWith_14_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[14]
								: currentWith_14_tFileOutputExcel_1 + 2;
					}

					if (row4.mental_health_consequence != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 15;

						jxl.write.WritableCell cell_15_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.mental_health_consequence);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_15_tFileOutputExcel_1);
						int currentWith_15_tFileOutputExcel_1 = cell_15_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[15] = fitWidth_tFileOutputExcel_1[15] > currentWith_15_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[15]
								: currentWith_15_tFileOutputExcel_1 + 2;
					}

					if (row4.phys_health_consequence != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 16;

						jxl.write.WritableCell cell_16_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.phys_health_consequence);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_16_tFileOutputExcel_1);
						int currentWith_16_tFileOutputExcel_1 = cell_16_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[16] = fitWidth_tFileOutputExcel_1[16] > currentWith_16_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[16]
								: currentWith_16_tFileOutputExcel_1 + 2;
					}

					if (row4.coworkers != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 17;

						jxl.write.WritableCell cell_17_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.coworkers);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_17_tFileOutputExcel_1);
						int currentWith_17_tFileOutputExcel_1 = cell_17_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[17] = fitWidth_tFileOutputExcel_1[17] > currentWith_17_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[17]
								: currentWith_17_tFileOutputExcel_1 + 2;
					}

					if (row4.supervisor != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 18;

						jxl.write.WritableCell cell_18_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.supervisor);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_18_tFileOutputExcel_1);
						int currentWith_18_tFileOutputExcel_1 = cell_18_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[18] = fitWidth_tFileOutputExcel_1[18] > currentWith_18_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[18]
								: currentWith_18_tFileOutputExcel_1 + 2;
					}

					if (row4.mental_health_interview != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 19;

						jxl.write.WritableCell cell_19_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.mental_health_interview);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_19_tFileOutputExcel_1);
						int currentWith_19_tFileOutputExcel_1 = cell_19_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[19] = fitWidth_tFileOutputExcel_1[19] > currentWith_19_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[19]
								: currentWith_19_tFileOutputExcel_1 + 2;
					}

					if (row4.phys_health_interview != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 20;

						jxl.write.WritableCell cell_20_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.phys_health_interview);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_20_tFileOutputExcel_1);
						int currentWith_20_tFileOutputExcel_1 = cell_20_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[20] = fitWidth_tFileOutputExcel_1[20] > currentWith_20_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[20]
								: currentWith_20_tFileOutputExcel_1 + 2;
					}

					if (row4.mental_vs_physical != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 21;

						jxl.write.WritableCell cell_21_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.mental_vs_physical);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_21_tFileOutputExcel_1);
						int currentWith_21_tFileOutputExcel_1 = cell_21_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[21] = fitWidth_tFileOutputExcel_1[21] > currentWith_21_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[21]
								: currentWith_21_tFileOutputExcel_1 + 2;
					}

					if (row4.obs_consequence != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 22;

						jxl.write.WritableCell cell_22_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.obs_consequence);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_22_tFileOutputExcel_1);
						int currentWith_22_tFileOutputExcel_1 = cell_22_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[22] = fitWidth_tFileOutputExcel_1[22] > currentWith_22_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[22]
								: currentWith_22_tFileOutputExcel_1 + 2;
					}

					if (row4.comments != null) {

//modif start

						columnIndex_tFileOutputExcel_1 = 23;

						jxl.write.WritableCell cell_23_tFileOutputExcel_1 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_1,
								startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,

//modif end
								row4.comments);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_1.addCell(cell_23_tFileOutputExcel_1);
						int currentWith_23_tFileOutputExcel_1 = cell_23_tFileOutputExcel_1.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_1[23] = fitWidth_tFileOutputExcel_1[23] > currentWith_23_tFileOutputExcel_1
								? fitWidth_tFileOutputExcel_1[23]
								: currentWith_23_tFileOutputExcel_1 + 2;
					}

					nb_line_tFileOutputExcel_1++;

					tos_count_tFileOutputExcel_1++;

					/**
					 * [tFileOutputExcel_1 main ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE", nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				writeableWorkbook_tFileOutputExcel_1.write();
				writeableWorkbook_tFileOutputExcel_1.close();

				globalMap.put("tFileOutputExcel_1_NB_LINE", nb_line_tFileOutputExcel_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE", nb_line_tFilterColumns_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tSortRow_3_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				row8Struct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut.toArray(new Comparablerow8Struct[0]);

				java.util.Arrays.sort(array_tSortRow_3_SortOut);

				globalMap.put("tSortRow_3", array_tSortRow_3_SortOut);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSortRow_3_SortOut", true);
				end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortOut end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tFileOutputExcel_2 = 0;

				int columnIndex_tFileOutputExcel_2 = 0;

				int nb_line_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = "C:/Users/Nuno/Desktop/TOS_BD-20190620_1446-V7.2.1/workspace/outfemeasUSA.xls";
				java.io.File file_tFileOutputExcel_2 = new java.io.File(fileName_tFileOutputExcel_2);
				boolean isFileGenerated_tFileOutputExcel_2 = true;
//create directory only if not exists		  
				java.io.File parentFile_tFileOutputExcel_2 = file_tFileOutputExcel_2.getParentFile();
				if (parentFile_tFileOutputExcel_2 != null && !parentFile_tFileOutputExcel_2.exists()) {

					parentFile_tFileOutputExcel_2.mkdirs();

				}

				jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_2 = null;
				jxl.write.WritableSheet writableSheet_tFileOutputExcel_2 = null;

				jxl.WorkbookSettings workbookSettings_tFileOutputExcel_2 = new jxl.WorkbookSettings();
				workbookSettings_tFileOutputExcel_2.setEncoding("ISO-8859-15");
				writeableWorkbook_tFileOutputExcel_2 = new jxl.write.biff.WritableWorkbookImpl(
						new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_2)),
						true, workbookSettings_tFileOutputExcel_2);

				writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.getSheet("Sheet1");
				if (writableSheet_tFileOutputExcel_2 == null) {
					writableSheet_tFileOutputExcel_2 = writeableWorkbook_tFileOutputExcel_2.createSheet("Sheet1",
							writeableWorkbook_tFileOutputExcel_2.getNumberOfSheets());
				}

				// modif start
				int startRowNum_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2.getRows();
				// modif end

				int[] fitWidth_tFileOutputExcel_2 = new int[24];
				for (int i_tFileOutputExcel_2 = 0; i_tFileOutputExcel_2 < 24; i_tFileOutputExcel_2++) {
					int fitCellViewSize_tFileOutputExcel_2 = writableSheet_tFileOutputExcel_2
							.getColumnView(i_tFileOutputExcel_2).getSize();
					fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] = fitCellViewSize_tFileOutputExcel_2 / 256;
					if (fitCellViewSize_tFileOutputExcel_2 % 256 != 0) {
						fitWidth_tFileOutputExcel_2[i_tFileOutputExcel_2] += 1;
					}
				}

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tSortRow_3_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_3_SortIn", false);
				start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				int tos_count_tSortRow_3_SortIn = 0;

				row8Struct[] array_tSortRow_3_SortIn = (row8Struct[]) globalMap.remove("tSortRow_3");

				int nb_line_tSortRow_3_SortIn = 0;

				row8Struct current_tSortRow_3_SortIn = null;

				for (int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++) {
					current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
					row9.Timestamp = current_tSortRow_3_SortIn.Timestamp;
					row9.state = current_tSortRow_3_SortIn.state;
					row9.self_employed = current_tSortRow_3_SortIn.self_employed;
					row9.family_history = current_tSortRow_3_SortIn.family_history;
					row9.treatment = current_tSortRow_3_SortIn.treatment;
					row9.work_interfere = current_tSortRow_3_SortIn.work_interfere;
					row9.no_employees = current_tSortRow_3_SortIn.no_employees;
					row9.remote_work = current_tSortRow_3_SortIn.remote_work;
					row9.tech_company = current_tSortRow_3_SortIn.tech_company;
					row9.benefits = current_tSortRow_3_SortIn.benefits;
					row9.care_options = current_tSortRow_3_SortIn.care_options;
					row9.wellness_program = current_tSortRow_3_SortIn.wellness_program;
					row9.seek_help = current_tSortRow_3_SortIn.seek_help;
					row9.anonymity = current_tSortRow_3_SortIn.anonymity;
					row9.leave = current_tSortRow_3_SortIn.leave;
					row9.mental_health_consequence = current_tSortRow_3_SortIn.mental_health_consequence;
					row9.phys_health_consequence = current_tSortRow_3_SortIn.phys_health_consequence;
					row9.coworkers = current_tSortRow_3_SortIn.coworkers;
					row9.supervisor = current_tSortRow_3_SortIn.supervisor;
					row9.mental_health_interview = current_tSortRow_3_SortIn.mental_health_interview;
					row9.phys_health_interview = current_tSortRow_3_SortIn.phys_health_interview;
					row9.mental_vs_physical = current_tSortRow_3_SortIn.mental_vs_physical;
					row9.obs_consequence = current_tSortRow_3_SortIn.obs_consequence;
					row9.comments = current_tSortRow_3_SortIn.comments;
					// increase number of line sorted
					nb_line_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_3_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					tos_count_tSortRow_3_SortIn++;

					/**
					 * [tSortRow_3_SortIn main ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_2 main ] start
					 */

					currentComponent = "tFileOutputExcel_2";

					// row9
					// row9

					if (execStat) {
						runStat.updateStatOnConnection("row9" + iterateId, 1, 1);
					}

					if (row9.Timestamp != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 0;

						jxl.write.WritableCell cell_0_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.Timestamp);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_0_tFileOutputExcel_2);
						int currentWith_0_tFileOutputExcel_2 = cell_0_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[0] = fitWidth_tFileOutputExcel_2[0] > currentWith_0_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[0]
								: currentWith_0_tFileOutputExcel_2 + 2;
					}

					if (row9.state != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 1;

						jxl.write.WritableCell cell_1_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.state);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_1_tFileOutputExcel_2);
						int currentWith_1_tFileOutputExcel_2 = cell_1_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[1] = fitWidth_tFileOutputExcel_2[1] > currentWith_1_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[1]
								: currentWith_1_tFileOutputExcel_2 + 2;
					}

					if (row9.self_employed != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 2;

						jxl.write.WritableCell cell_2_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.self_employed);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_2_tFileOutputExcel_2);
						int currentWith_2_tFileOutputExcel_2 = cell_2_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[2] = fitWidth_tFileOutputExcel_2[2] > currentWith_2_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[2]
								: currentWith_2_tFileOutputExcel_2 + 2;
					}

					if (row9.family_history != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 3;

						jxl.write.WritableCell cell_3_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.family_history);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_3_tFileOutputExcel_2);
						int currentWith_3_tFileOutputExcel_2 = cell_3_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[3] = fitWidth_tFileOutputExcel_2[3] > currentWith_3_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[3]
								: currentWith_3_tFileOutputExcel_2 + 2;
					}

					if (row9.treatment != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 4;

						jxl.write.WritableCell cell_4_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.treatment);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_4_tFileOutputExcel_2);
						int currentWith_4_tFileOutputExcel_2 = cell_4_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[4] = fitWidth_tFileOutputExcel_2[4] > currentWith_4_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[4]
								: currentWith_4_tFileOutputExcel_2 + 2;
					}

					if (row9.work_interfere != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 5;

						jxl.write.WritableCell cell_5_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.work_interfere);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_5_tFileOutputExcel_2);
						int currentWith_5_tFileOutputExcel_2 = cell_5_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[5] = fitWidth_tFileOutputExcel_2[5] > currentWith_5_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[5]
								: currentWith_5_tFileOutputExcel_2 + 2;
					}

					if (row9.no_employees != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 6;

						jxl.write.WritableCell cell_6_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.no_employees);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_6_tFileOutputExcel_2);
						int currentWith_6_tFileOutputExcel_2 = cell_6_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[6] = fitWidth_tFileOutputExcel_2[6] > currentWith_6_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[6]
								: currentWith_6_tFileOutputExcel_2 + 2;
					}

					if (row9.remote_work != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 7;

						jxl.write.WritableCell cell_7_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.remote_work);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_7_tFileOutputExcel_2);
						int currentWith_7_tFileOutputExcel_2 = cell_7_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[7] = fitWidth_tFileOutputExcel_2[7] > currentWith_7_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[7]
								: currentWith_7_tFileOutputExcel_2 + 2;
					}

					if (row9.tech_company != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 8;

						jxl.write.WritableCell cell_8_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.tech_company);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_8_tFileOutputExcel_2);
						int currentWith_8_tFileOutputExcel_2 = cell_8_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[8] = fitWidth_tFileOutputExcel_2[8] > currentWith_8_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[8]
								: currentWith_8_tFileOutputExcel_2 + 2;
					}

					if (row9.benefits != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 9;

						jxl.write.WritableCell cell_9_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.benefits);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_9_tFileOutputExcel_2);
						int currentWith_9_tFileOutputExcel_2 = cell_9_tFileOutputExcel_2.getContents().trim().length();
						fitWidth_tFileOutputExcel_2[9] = fitWidth_tFileOutputExcel_2[9] > currentWith_9_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[9]
								: currentWith_9_tFileOutputExcel_2 + 2;
					}

					if (row9.care_options != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 10;

						jxl.write.WritableCell cell_10_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.care_options);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_10_tFileOutputExcel_2);
						int currentWith_10_tFileOutputExcel_2 = cell_10_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[10] = fitWidth_tFileOutputExcel_2[10] > currentWith_10_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[10]
								: currentWith_10_tFileOutputExcel_2 + 2;
					}

					if (row9.wellness_program != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 11;

						jxl.write.WritableCell cell_11_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.wellness_program);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_11_tFileOutputExcel_2);
						int currentWith_11_tFileOutputExcel_2 = cell_11_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[11] = fitWidth_tFileOutputExcel_2[11] > currentWith_11_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[11]
								: currentWith_11_tFileOutputExcel_2 + 2;
					}

					if (row9.seek_help != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 12;

						jxl.write.WritableCell cell_12_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.seek_help);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_12_tFileOutputExcel_2);
						int currentWith_12_tFileOutputExcel_2 = cell_12_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[12] = fitWidth_tFileOutputExcel_2[12] > currentWith_12_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[12]
								: currentWith_12_tFileOutputExcel_2 + 2;
					}

					if (row9.anonymity != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 13;

						jxl.write.WritableCell cell_13_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.anonymity);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_13_tFileOutputExcel_2);
						int currentWith_13_tFileOutputExcel_2 = cell_13_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[13] = fitWidth_tFileOutputExcel_2[13] > currentWith_13_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[13]
								: currentWith_13_tFileOutputExcel_2 + 2;
					}

					if (row9.leave != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 14;

						jxl.write.WritableCell cell_14_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.leave);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_14_tFileOutputExcel_2);
						int currentWith_14_tFileOutputExcel_2 = cell_14_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[14] = fitWidth_tFileOutputExcel_2[14] > currentWith_14_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[14]
								: currentWith_14_tFileOutputExcel_2 + 2;
					}

					if (row9.mental_health_consequence != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 15;

						jxl.write.WritableCell cell_15_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.mental_health_consequence);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_15_tFileOutputExcel_2);
						int currentWith_15_tFileOutputExcel_2 = cell_15_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[15] = fitWidth_tFileOutputExcel_2[15] > currentWith_15_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[15]
								: currentWith_15_tFileOutputExcel_2 + 2;
					}

					if (row9.phys_health_consequence != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 16;

						jxl.write.WritableCell cell_16_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.phys_health_consequence);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_16_tFileOutputExcel_2);
						int currentWith_16_tFileOutputExcel_2 = cell_16_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[16] = fitWidth_tFileOutputExcel_2[16] > currentWith_16_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[16]
								: currentWith_16_tFileOutputExcel_2 + 2;
					}

					if (row9.coworkers != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 17;

						jxl.write.WritableCell cell_17_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.coworkers);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_17_tFileOutputExcel_2);
						int currentWith_17_tFileOutputExcel_2 = cell_17_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[17] = fitWidth_tFileOutputExcel_2[17] > currentWith_17_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[17]
								: currentWith_17_tFileOutputExcel_2 + 2;
					}

					if (row9.supervisor != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 18;

						jxl.write.WritableCell cell_18_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.supervisor);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_18_tFileOutputExcel_2);
						int currentWith_18_tFileOutputExcel_2 = cell_18_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[18] = fitWidth_tFileOutputExcel_2[18] > currentWith_18_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[18]
								: currentWith_18_tFileOutputExcel_2 + 2;
					}

					if (row9.mental_health_interview != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 19;

						jxl.write.WritableCell cell_19_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.mental_health_interview);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_19_tFileOutputExcel_2);
						int currentWith_19_tFileOutputExcel_2 = cell_19_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[19] = fitWidth_tFileOutputExcel_2[19] > currentWith_19_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[19]
								: currentWith_19_tFileOutputExcel_2 + 2;
					}

					if (row9.phys_health_interview != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 20;

						jxl.write.WritableCell cell_20_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.phys_health_interview);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_20_tFileOutputExcel_2);
						int currentWith_20_tFileOutputExcel_2 = cell_20_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[20] = fitWidth_tFileOutputExcel_2[20] > currentWith_20_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[20]
								: currentWith_20_tFileOutputExcel_2 + 2;
					}

					if (row9.mental_vs_physical != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 21;

						jxl.write.WritableCell cell_21_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.mental_vs_physical);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_21_tFileOutputExcel_2);
						int currentWith_21_tFileOutputExcel_2 = cell_21_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[21] = fitWidth_tFileOutputExcel_2[21] > currentWith_21_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[21]
								: currentWith_21_tFileOutputExcel_2 + 2;
					}

					if (row9.obs_consequence != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 22;

						jxl.write.WritableCell cell_22_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.obs_consequence);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_22_tFileOutputExcel_2);
						int currentWith_22_tFileOutputExcel_2 = cell_22_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[22] = fitWidth_tFileOutputExcel_2[22] > currentWith_22_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[22]
								: currentWith_22_tFileOutputExcel_2 + 2;
					}

					if (row9.comments != null) {

//modif start

						columnIndex_tFileOutputExcel_2 = 23;

						jxl.write.WritableCell cell_23_tFileOutputExcel_2 = new jxl.write.Label(
								columnIndex_tFileOutputExcel_2,
								startRowNum_tFileOutputExcel_2 + nb_line_tFileOutputExcel_2,

//modif end
								row9.comments);
//modif start					
						// If we keep the cell format from the existing cell in sheet

//modif ends							
						writableSheet_tFileOutputExcel_2.addCell(cell_23_tFileOutputExcel_2);
						int currentWith_23_tFileOutputExcel_2 = cell_23_tFileOutputExcel_2.getContents().trim()
								.length();
						fitWidth_tFileOutputExcel_2[23] = fitWidth_tFileOutputExcel_2[23] > currentWith_23_tFileOutputExcel_2
								? fitWidth_tFileOutputExcel_2[23]
								: currentWith_23_tFileOutputExcel_2 + 2;
					}

					nb_line_tFileOutputExcel_2++;

					tos_count_tFileOutputExcel_2++;

					/**
					 * [tFileOutputExcel_2 main ] stop
					 */

					/**
					 * [tFileOutputExcel_2 process_data_begin ] start
					 */

					currentComponent = "tFileOutputExcel_2";

					/**
					 * [tFileOutputExcel_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_2 process_data_end ] start
					 */

					currentComponent = "tFileOutputExcel_2";

					/**
					 * [tFileOutputExcel_2 process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

					/**
					 * [tSortRow_3_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_3_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_3";

					currentComponent = "tSortRow_3_SortIn";

				}

				globalMap.put("tSortRow_3_SortIn_NB_LINE", nb_line_tSortRow_3_SortIn);

				ok_Hash.put("tSortRow_3_SortIn", true);
				end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_3_SortIn end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				writeableWorkbook_tFileOutputExcel_2.write();
				writeableWorkbook_tFileOutputExcel_2.close();

				globalMap.put("tFileOutputExcel_2_NB_LINE", nb_line_tFileOutputExcel_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_3_SortIn"
			globalMap.remove("tSortRow_3");

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tSortRow_3_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortOut";

				/**
				 * [tSortRow_3_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_3_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_3";

				currentComponent = "tSortRow_3_SortIn";

				/**
				 * [tSortRow_3_SortIn finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final filtros filtrosClass = new filtros();

		int exitCode = filtrosClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = filtros.class.getClassLoader()
					.getResourceAsStream("ficha5/filtros_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = filtros.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : filtros");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 235774 characters generated by Talend Open Studio for Big Data on the 13 de
 * Novembro de 2019 18:32:34 GMT
 ************************************************************************************************/